{"ast":null,"code":"import _objectSpread from\"C:/Users/Neerush Buchi/Desktop/Neerush Folder/HMS/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{DateTime}from'luxon';// Parse appointment date and time into a Luxon DateTime in local zone.\n// appointment.date can be a date string or ISO; appointment.time may be 'HH:mm' or 'hh:mm a'.\nexport function getAppointmentDateTime(appointment){if(!appointment)return null;// Try to get ISO date part from appointment.date\nlet dateISO;try{const dt=DateTime.fromISO(appointment.date,{zone:'utc'});if(dt.isValid){// Keep the date components (year-month-day)\ndateISO=dt.toISODate();}else{// Try parsing as RFC2822 or HTTP if ISO fails\nconst alt=DateTime.fromRFC2822(appointment.date,{zone:'utc'});if(alt.isValid)dateISO=alt.toISODate();}}catch(e){// ignore\n}if(!dateISO){// fallback: try Date constructor\nconst fallback=new Date(appointment.date);if(!isNaN(fallback.getTime())){dateISO=fallback.toISOString().split('T')[0];}else{return null;}}// Normalize time. If time is empty, default to start of day.\nconst timeStr=appointment.time?appointment.time.trim():'00:00';// Try parsing as 24-hour first\nlet combined=DateTime.fromISO(\"\".concat(dateISO,\"T\").concat(timeStr),{zone:'local'});if(combined.isValid)return combined;// Try parsing common formats with fromFormat\nconst formats=['h:mm a','hh:mm a','H:mm','HH:mm','h:mm:ss a','HH:mm:ss'];for(const fmt of formats){const dt=DateTime.fromFormat(\"\".concat(dateISO,\" \").concat(timeStr),\"yyyy-MM-dd \".concat(fmt),{zone:'local'});if(dt.isValid)return dt;}// Last resort: parse using JS Date and convert\nconst jsDate=new Date(\"\".concat(dateISO,\" \").concat(timeStr));if(!isNaN(jsDate.getTime()))return DateTime.fromJSDate(jsDate).setZone('local');return null;}export function getUpcomingAppointments(){let appointments=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{limit=3}=options;const now=DateTime.local();return appointments.map(a=>_objectSpread(_objectSpread({},a),{},{_dt:getAppointmentDateTime(a)})).filter(a=>a._dt&&a._dt>now&&a.status!=='Cancelled').sort((a,b)=>a._dt-b._dt).slice(0,limit);}export function getRecentAppointments(){let appointments=arguments.length>0&&arguments[0]!==undefined?arguments[0]:[];let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{limit=5}=options;const now=DateTime.local();return appointments.map(a=>_objectSpread(_objectSpread({},a),{},{_dt:getAppointmentDateTime(a)})).filter(a=>a._dt&&a._dt<=now).sort((a,b)=>b._dt-a._dt).slice(0,limit);}export default{getAppointmentDateTime,getUpcomingAppointments,getRecentAppointments};","map":{"version":3,"names":["DateTime","getAppointmentDateTime","appointment","dateISO","dt","fromISO","date","zone","isValid","toISODate","alt","fromRFC2822","e","fallback","Date","isNaN","getTime","toISOString","split","timeStr","time","trim","combined","concat","formats","fmt","fromFormat","jsDate","fromJSDate","setZone","getUpcomingAppointments","appointments","arguments","length","undefined","options","limit","now","local","map","a","_objectSpread","_dt","filter","status","sort","b","slice","getRecentAppointments"],"sources":["C:/Users/Neerush Buchi/Desktop/Neerush Folder/HMS/frontend/src/utils/appointmentDateUtils.js"],"sourcesContent":["import { DateTime } from 'luxon';\r\n\r\n// Parse appointment date and time into a Luxon DateTime in local zone.\r\n// appointment.date can be a date string or ISO; appointment.time may be 'HH:mm' or 'hh:mm a'.\r\nexport function getAppointmentDateTime(appointment) {\r\n  if (!appointment) return null;\r\n\r\n  // Try to get ISO date part from appointment.date\r\n  let dateISO;\r\n  try {\r\n    const dt = DateTime.fromISO(appointment.date, { zone: 'utc' });\r\n    if (dt.isValid) {\r\n      // Keep the date components (year-month-day)\r\n      dateISO = dt.toISODate();\r\n    } else {\r\n      // Try parsing as RFC2822 or HTTP if ISO fails\r\n      const alt = DateTime.fromRFC2822(appointment.date, { zone: 'utc' });\r\n      if (alt.isValid) dateISO = alt.toISODate();\r\n    }\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n\r\n  if (!dateISO) {\r\n    // fallback: try Date constructor\r\n    const fallback = new Date(appointment.date);\r\n    if (!isNaN(fallback.getTime())) {\r\n      dateISO = fallback.toISOString().split('T')[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Normalize time. If time is empty, default to start of day.\r\n  const timeStr = appointment.time ? appointment.time.trim() : '00:00';\r\n\r\n  // Try parsing as 24-hour first\r\n  let combined = DateTime.fromISO(`${dateISO}T${timeStr}`, { zone: 'local' });\r\n  if (combined.isValid) return combined;\r\n\r\n  // Try parsing common formats with fromFormat\r\n  const formats = ['h:mm a', 'hh:mm a', 'H:mm', 'HH:mm', 'h:mm:ss a', 'HH:mm:ss'];\r\n  for (const fmt of formats) {\r\n    const dt = DateTime.fromFormat(`${dateISO} ${timeStr}`, `yyyy-MM-dd ${fmt}`, { zone: 'local' });\r\n    if (dt.isValid) return dt;\r\n  }\r\n\r\n  // Last resort: parse using JS Date and convert\r\n  const jsDate = new Date(`${dateISO} ${timeStr}`);\r\n  if (!isNaN(jsDate.getTime())) return DateTime.fromJSDate(jsDate).setZone('local');\r\n\r\n  return null;\r\n}\r\n\r\nexport function getUpcomingAppointments(appointments = [], options = {}) {\r\n  const { limit = 3 } = options;\r\n  const now = DateTime.local();\r\n  return appointments\r\n    .map(a => ({ ...a, _dt: getAppointmentDateTime(a) }))\r\n    .filter(a => a._dt && a._dt > now && a.status !== 'Cancelled')\r\n    .sort((a, b) => a._dt - b._dt)\r\n    .slice(0, limit);\r\n}\r\n\r\nexport function getRecentAppointments(appointments = [], options = {}) {\r\n  const { limit = 5 } = options;\r\n  const now = DateTime.local();\r\n  return appointments\r\n    .map(a => ({ ...a, _dt: getAppointmentDateTime(a) }))\r\n    .filter(a => a._dt && a._dt <= now)\r\n    .sort((a, b) => b._dt - a._dt)\r\n    .slice(0, limit);\r\n}\r\n\r\nexport default { getAppointmentDateTime, getUpcomingAppointments, getRecentAppointments };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}