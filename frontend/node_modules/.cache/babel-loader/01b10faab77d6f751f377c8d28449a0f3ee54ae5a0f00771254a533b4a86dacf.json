{"ast":null,"code":"import { DateTime } from 'luxon';\n\n// Parse appointment date and time into a Luxon DateTime in local zone.\n// appointment.date can be a date string or ISO; appointment.time may be 'HH:mm' or 'hh:mm a'.\nexport function getAppointmentDateTime(appointment) {\n  if (!appointment) return null;\n\n  // Try to get ISO date part from appointment.date\n  let dateISO;\n  try {\n    const dt = DateTime.fromISO(appointment.date, {\n      zone: 'utc'\n    });\n    if (dt.isValid) {\n      // Keep the date components (year-month-day)\n      dateISO = dt.toISODate();\n    } else {\n      // Try parsing as RFC2822 or HTTP if ISO fails\n      const alt = DateTime.fromRFC2822(appointment.date, {\n        zone: 'utc'\n      });\n      if (alt.isValid) dateISO = alt.toISODate();\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (!dateISO) {\n    // fallback: try Date constructor\n    const fallback = new Date(appointment.date);\n    if (!isNaN(fallback.getTime())) {\n      dateISO = fallback.toISOString().split('T')[0];\n    } else {\n      return null;\n    }\n  }\n\n  // Normalize time. If time is empty, default to start of day.\n  const timeStr = appointment.time ? appointment.time.trim() : '00:00';\n\n  // Try parsing as 24-hour first\n  let combined = DateTime.fromISO(`${dateISO}T${timeStr}`, {\n    zone: 'local'\n  });\n  if (combined.isValid) return combined;\n\n  // Try parsing common formats with fromFormat\n  const formats = ['h:mm a', 'hh:mm a', 'H:mm', 'HH:mm', 'h:mm:ss a', 'HH:mm:ss'];\n  for (const fmt of formats) {\n    const dt = DateTime.fromFormat(`${dateISO} ${timeStr}`, `yyyy-MM-dd ${fmt}`, {\n      zone: 'local'\n    });\n    if (dt.isValid) return dt;\n  }\n\n  // Last resort: parse using JS Date and convert\n  const jsDate = new Date(`${dateISO} ${timeStr}`);\n  if (!isNaN(jsDate.getTime())) return DateTime.fromJSDate(jsDate).setZone('local');\n  return null;\n}\nexport function getUpcomingAppointments(appointments = [], options = {}) {\n  const {\n    limit = 3\n  } = options;\n  const now = DateTime.local();\n  return appointments.map(a => ({\n    ...a,\n    _dt: getAppointmentDateTime(a)\n  })).filter(a => a._dt && a._dt > now && a.status !== 'Cancelled').sort((a, b) => a._dt - b._dt).slice(0, limit);\n}\nexport function getRecentAppointments(appointments = [], options = {}) {\n  const {\n    limit = 5\n  } = options;\n  const now = DateTime.local();\n  return appointments.map(a => ({\n    ...a,\n    _dt: getAppointmentDateTime(a)\n  })).filter(a => a._dt && a._dt <= now).sort((a, b) => b._dt - a._dt).slice(0, limit);\n}\nexport default {\n  getAppointmentDateTime,\n  getUpcomingAppointments,\n  getRecentAppointments\n};","map":{"version":3,"names":["DateTime","getAppointmentDateTime","appointment","dateISO","dt","fromISO","date","zone","isValid","toISODate","alt","fromRFC2822","e","fallback","Date","isNaN","getTime","toISOString","split","timeStr","time","trim","combined","formats","fmt","fromFormat","jsDate","fromJSDate","setZone","getUpcomingAppointments","appointments","options","limit","now","local","map","a","_dt","filter","status","sort","b","slice","getRecentAppointments"],"sources":["C:/Users/Neerush Buchi/Desktop/Neerush Folder/HMS/frontend/src/utils/appointmentDateUtils.js"],"sourcesContent":["import { DateTime } from 'luxon';\r\n\r\n// Parse appointment date and time into a Luxon DateTime in local zone.\r\n// appointment.date can be a date string or ISO; appointment.time may be 'HH:mm' or 'hh:mm a'.\r\nexport function getAppointmentDateTime(appointment) {\r\n  if (!appointment) return null;\r\n\r\n  // Try to get ISO date part from appointment.date\r\n  let dateISO;\r\n  try {\r\n    const dt = DateTime.fromISO(appointment.date, { zone: 'utc' });\r\n    if (dt.isValid) {\r\n      // Keep the date components (year-month-day)\r\n      dateISO = dt.toISODate();\r\n    } else {\r\n      // Try parsing as RFC2822 or HTTP if ISO fails\r\n      const alt = DateTime.fromRFC2822(appointment.date, { zone: 'utc' });\r\n      if (alt.isValid) dateISO = alt.toISODate();\r\n    }\r\n  } catch (e) {\r\n    // ignore\r\n  }\r\n\r\n  if (!dateISO) {\r\n    // fallback: try Date constructor\r\n    const fallback = new Date(appointment.date);\r\n    if (!isNaN(fallback.getTime())) {\r\n      dateISO = fallback.toISOString().split('T')[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Normalize time. If time is empty, default to start of day.\r\n  const timeStr = appointment.time ? appointment.time.trim() : '00:00';\r\n\r\n  // Try parsing as 24-hour first\r\n  let combined = DateTime.fromISO(`${dateISO}T${timeStr}`, { zone: 'local' });\r\n  if (combined.isValid) return combined;\r\n\r\n  // Try parsing common formats with fromFormat\r\n  const formats = ['h:mm a', 'hh:mm a', 'H:mm', 'HH:mm', 'h:mm:ss a', 'HH:mm:ss'];\r\n  for (const fmt of formats) {\r\n    const dt = DateTime.fromFormat(`${dateISO} ${timeStr}`, `yyyy-MM-dd ${fmt}`, { zone: 'local' });\r\n    if (dt.isValid) return dt;\r\n  }\r\n\r\n  // Last resort: parse using JS Date and convert\r\n  const jsDate = new Date(`${dateISO} ${timeStr}`);\r\n  if (!isNaN(jsDate.getTime())) return DateTime.fromJSDate(jsDate).setZone('local');\r\n\r\n  return null;\r\n}\r\n\r\nexport function getUpcomingAppointments(appointments = [], options = {}) {\r\n  const { limit = 3 } = options;\r\n  const now = DateTime.local();\r\n  return appointments\r\n    .map(a => ({ ...a, _dt: getAppointmentDateTime(a) }))\r\n    .filter(a => a._dt && a._dt > now && a.status !== 'Cancelled')\r\n    .sort((a, b) => a._dt - b._dt)\r\n    .slice(0, limit);\r\n}\r\n\r\nexport function getRecentAppointments(appointments = [], options = {}) {\r\n  const { limit = 5 } = options;\r\n  const now = DateTime.local();\r\n  return appointments\r\n    .map(a => ({ ...a, _dt: getAppointmentDateTime(a) }))\r\n    .filter(a => a._dt && a._dt <= now)\r\n    .sort((a, b) => b._dt - a._dt)\r\n    .slice(0, limit);\r\n}\r\n\r\nexport default { getAppointmentDateTime, getUpcomingAppointments, getRecentAppointments };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}