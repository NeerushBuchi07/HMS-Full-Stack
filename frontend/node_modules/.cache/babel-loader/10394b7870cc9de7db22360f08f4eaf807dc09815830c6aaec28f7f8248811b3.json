{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import api from'../services/api';// Create context with undefined default value\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);// Custom hook to use auth context\nexport function useAuth(){const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;}// Provider component\nexport function AuthProvider(_ref){let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const checkAuth=async()=>{try{const token=localStorage.getItem('token');const userData=localStorage.getItem('user');if(!token||!userData){// Clear any stale data\nlocalStorage.removeItem('token');localStorage.removeItem('user');delete api.defaults.headers.common['Authorization'];setUser(null);setLoading(false);return;}// First set the user from localStorage to maintain state during refresh\ntry{const parsedUser=JSON.parse(userData);setUser(parsedUser);api.defaults.headers.common['Authorization']=\"Bearer \".concat(token);}catch(parseError){console.error('Error parsing user data:',parseError);logout();return;}// Then validate token with backend without disrupting the session\ntry{const response=await api.get('/auth/verify',{headers:{Authorization:\"Bearer \".concat(token)},// Add timeout to prevent long-hanging requests\ntimeout:5000});if(response.data.status!=='success'){console.warn('Token validation unsuccessful');}}catch(error){var _error$response;// Only logout on explicit 401 unauthorized\nif(((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.status)===401){console.error('Token unauthorized:',error);logout();}else{// For other errors (network, timeout etc), keep the session\nconsole.warn('Token validation error:',error);}}}catch(error){console.error('Auth check failed:',error);logout();}finally{setLoading(false);}};checkAuth();},[]);const login=async(email,password)=>{try{const response=await api.post('/auth/login',{email,password});if(response.data.status==='success'){const{token,data}=response.data;// Store auth data\nlocalStorage.setItem('token',token);localStorage.setItem('user',JSON.stringify(data.user));// Update axios default headers\napi.defaults.headers.common['Authorization']=\"Bearer \".concat(token);// Update state\nsetUser(data.user);return{success:true,data};}else{throw new Error(response.data.message||'Login failed');}}catch(error){var _error$response2,_error$response2$data;// Clear any partial data on error\nlogout();return{success:false,message:((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||error.message||'Login failed'};}};const logout=()=>{// Clear localStorage\nlocalStorage.removeItem('token');localStorage.removeItem('user');// Clear axios headers\ndelete api.defaults.headers.common['Authorization'];// Reset state\nsetUser(null);setLoading(false);};const value={user,login,logout,loading};if(loading)return null;return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","api","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","checkAuth","token","localStorage","getItem","userData","removeItem","defaults","headers","common","parsedUser","JSON","parse","concat","parseError","console","error","logout","response","get","Authorization","timeout","data","status","warn","_error$response","login","email","password","post","setItem","stringify","success","message","_error$response2","_error$response2$data","value","Provider"],"sources":["C:/Users/Neerush Buchi/Desktop/Neerush Folder/HMS/frontend/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport api from '../services/api';\r\n\r\n// Create context with undefined default value\r\nconst AuthContext = createContext(undefined);\r\n\r\n// Custom hook to use auth context\r\nexport function useAuth() {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// Provider component\r\nexport function AuthProvider({ children }) {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('token');\r\n        const userData = localStorage.getItem('user');\r\n        \r\n        if (!token || !userData) {\r\n          // Clear any stale data\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          delete api.defaults.headers.common['Authorization'];\r\n          setUser(null);\r\n          setLoading(false);\r\n          return;\r\n        }\r\n\r\n        // First set the user from localStorage to maintain state during refresh\r\n        try {\r\n          const parsedUser = JSON.parse(userData);\r\n          setUser(parsedUser);\r\n          api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        } catch (parseError) {\r\n          console.error('Error parsing user data:', parseError);\r\n          logout();\r\n          return;\r\n        }\r\n\r\n        // Then validate token with backend without disrupting the session\r\n        try {\r\n          const response = await api.get('/auth/verify', {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n            // Add timeout to prevent long-hanging requests\r\n            timeout: 5000\r\n          });\r\n          \r\n          if (response.data.status !== 'success') {\r\n            console.warn('Token validation unsuccessful');\r\n          }\r\n        } catch (error) {\r\n          // Only logout on explicit 401 unauthorized\r\n          if (error.response?.status === 401) {\r\n            console.error('Token unauthorized:', error);\r\n            logout();\r\n          } else {\r\n            // For other errors (network, timeout etc), keep the session\r\n            console.warn('Token validation error:', error);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth check failed:', error);\r\n        logout();\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (email, password) => {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      \r\n      if (response.data.status === 'success') {\r\n        const { token, data } = response.data;\r\n        \r\n        // Store auth data\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('user', JSON.stringify(data.user));\r\n        \r\n        // Update axios default headers\r\n        api.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n        \r\n        // Update state\r\n        setUser(data.user);\r\n        \r\n        return { success: true, data };\r\n      } else {\r\n        throw new Error(response.data.message || 'Login failed');\r\n      }\r\n    } catch (error) {\r\n      // Clear any partial data on error\r\n      logout();\r\n      return { \r\n        success: false, \r\n        message: error.response?.data?.message || error.message || 'Login failed' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear localStorage\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    \r\n    // Clear axios headers\r\n    delete api.defaults.headers.common['Authorization'];\r\n    \r\n    // Reset state\r\n    setUser(null);\r\n    setLoading(false);\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  if (loading) return null;\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}